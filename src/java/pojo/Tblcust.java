package pojo;
// Generated Oct 13, 2023 9:59:41 PM by Hibernate Tools 4.3.1

import DAO.DAOCustomer;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;

/**
 * TblCust generated by hbm2java
 */
@ManagedBean
public class Tblcust  implements java.io.Serializable {


     private Integer idCustomer;
     private String namaCustomer;
     private String alamat;
     private String noTlpn;
     
     public void save_Customer() {
        if (namaCustomer == null || namaCustomer.isEmpty() || alamat == null || alamat.isEmpty() || noTlpn == null || noTlpn.isEmpty()) {
            FacesMessage message = new FacesMessage("Data cannot be empty!");
            message.setSeverity(FacesMessage.SEVERITY_ERROR); // Menetapkan tingkat kesalahan menjadi error
            FacesContext.getCurrentInstance().addMessage(null, message);
        } else {
            DAOCustomer adddd = new DAOCustomer();
            adddd.addcustomer(this);
        }
    }

    

    public List<Tblcust>  getAllRecordsss() {
        DAOCustomer cus = new DAOCustomer();
        List<Tblcust> lCus = cus.retreveTblCust();
        return lCus;
    }

    public String getByIdcus() {
        String id_customer = idCustomer.toString();
        DAOCustomer cus = new DAOCustomer();
        List<Tblcust> lCus = cus.getbyID(id_customer);

        if (!lCus.isEmpty()) {
            // Customer ditemukan, isi nilai-nilai
            namaCustomer = lCus.get(0).getNamaCustomer();
            alamat = lCus.get(0).getAlamat();
            noTlpn = lCus.get(0).getNoTlpn();
        } else {
            // Customer tidak ditemukan, berikan pesan kesalahan kepada pengguna
            FacesMessage message = new FacesMessage("Customer with ID " + id_customer + " doesn't exist.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR); // Menetapkan tingkat kesalahan menjadi error
            FacesContext.getCurrentInstance().addMessage(null, message);
            
        }

        return "customer";
    }

    public String editta() {
        if (namaCustomer == null || namaCustomer.isEmpty() || alamat == null || alamat.isEmpty() || noTlpn == null || noTlpn.isEmpty()) {
            FacesMessage message = new FacesMessage("Data cannot be empty!");
            message.setSeverity(FacesMessage.SEVERITY_ERROR); // Menetapkan tingkat kesalahan menjadi error
            FacesContext.getCurrentInstance().addMessage(null, message);
        } else {
            DAOCustomer cus = new DAOCustomer();
            cus.editCustomer(this);
            namaCustomer = "";
            alamat = "";
            noTlpn = "";
        }
        return "customer";
    }

    public String deleteea() {
        DAOCustomer cus = new DAOCustomer();
        cus.deleteCustomer(idCustomer);
        namaCustomer = "";
        alamat = "";
        noTlpn = "";
        return "customer";
    }
    
    public Tblcust() {
    }

    public Tblcust(String namaCustomer, String alamat, String noTlpn) {
       this.namaCustomer = namaCustomer;
       this.alamat = alamat;
       this.noTlpn = noTlpn;
    }
   
    public Integer getIdCustomer() {
        return this.idCustomer;
    }
    
    public void setIdCustomer(Integer idCustomer) {
        this.idCustomer = idCustomer;
    }
    public String getNamaCustomer() {
        return this.namaCustomer;
    }
    
    public void setNamaCustomer(String namaCustomer) {
        this.namaCustomer = namaCustomer;
    }
    public String getAlamat() {
        return this.alamat;
    }
    
    public void setAlamat(String alamat) {
        this.alamat = alamat;
    }
    public String getNoTlpn() {
        return this.noTlpn;
    }
    
    public void setNoTlpn(String noTlpn) {
        this.noTlpn = noTlpn;
    }




}


