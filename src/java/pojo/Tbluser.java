package pojo;
// Generated Oct 15, 2023 7:25:02 PM by Hibernate Tools 4.3.1

import DAO.DAOLogin;
import DAO.DAOuser;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;

/**
 * TblUser generated by hbm2java
 */
@ManagedBean
public class Tbluser  implements java.io.Serializable {


     private Integer idUser;
     private String password;
     private String username;
     
     public void save_user() {
        if (username == null || username.isEmpty() || password == null || password.isEmpty()) {
            // Menampilkan pesan kesalahan jika username atau password kosong
            FacesMessage message = new FacesMessage("Username or Password cannot be empty!");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        } else {
            // Melanjutkan penyimpanan data ke database jika validasi sukses
            DAOLogin add = new DAOLogin();
            add.add_user(this);
        }
    }

    public String login_user() {
        DAOLogin uDao = new DAOLogin();
        List<Tbluser> us = uDao.getBy(username, password);
        try {
            if (us != null) {
                username = us.get(0).username;
                password = us.get(0).password;
                return "Event";
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return "gagal";
    }

    public List<Tbluser> getAllRecords() {
        DAOuser usr = new DAOuser();
        List<Tbluser> lUsr = usr.retrveTbluser();
        return lUsr;
    }

    public String getByIdus() {
        String id_user = idUser.toString();
        DAOuser usr = new DAOuser();
        List<Tbluser> lUsr = usr.getbyID(id_user);

        if (!lUsr.isEmpty()) {
            // User ditemukan, isi nilai-nilai
            username = lUsr.get(0).getUsername();
            password = lUsr.get(0).getPassword();
        } else {
            // User tidak ditemukan, berikan pesan kesalahan kepada pengguna
            FacesMessage message = new FacesMessage("user with ID " + id_user + " doesn't exist.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR); // Menetapkan tingkat kesalahan menjadi error
            FacesContext.getCurrentInstance().addMessage(null, message);
        }

        return "user";
    }

    public String edit() {
        if (username == null || username.isEmpty() || password == null || password.isEmpty()) {
            // Menampilkan pesan kesalahan jika username atau password kosong
            FacesMessage message = new FacesMessage("Username or Password cannot be empty!");
            FacesContext.getCurrentInstance().addMessage(null, message);
            return null; // Tidak melakukan perubahan jika ada kesalahan
        } else {
            // Melanjutkan perubahan data jika validasi sukses
            DAOuser usr = new DAOuser();
            usr.editUser(this);
            username = "";
            password = "";
            return "user";
        }
    }

    public String delete() {
//String id_user = idUser.toString();
        DAOuser usr = new DAOuser();
        usr.deleteUser(idUser);
        username = "";
        password = "";

        return "user";
    }

    public Tbluser() {
    }

    public Tbluser(String password, String username) {
       this.password = password;
       this.username = username;
    }
   
    public Integer getIdUser() {
        return this.idUser;
    }
    
    public void setIdUser(Integer idUser) {
        this.idUser = idUser;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

}


